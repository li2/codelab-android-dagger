// Generated by Dagger (https://dagger.dev).
package com.example.android.dagger.user;

import com.example.android.dagger.storage.Storage;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UserManager_Factory implements Factory<UserManager> {
  private final Provider<Storage> storageProvider;

  private final Provider<UserComponent.Factory> userComponentFactoryProvider;

  public UserManager_Factory(Provider<Storage> storageProvider,
      Provider<UserComponent.Factory> userComponentFactoryProvider) {
    this.storageProvider = storageProvider;
    this.userComponentFactoryProvider = userComponentFactoryProvider;
  }

  @Override
  public UserManager get() {
    return newInstance(storageProvider.get(), userComponentFactoryProvider.get());
  }

  public static UserManager_Factory create(Provider<Storage> storageProvider,
      Provider<UserComponent.Factory> userComponentFactoryProvider) {
    return new UserManager_Factory(storageProvider, userComponentFactoryProvider);
  }

  public static UserManager newInstance(Storage storage,
      UserComponent.Factory userComponentFactory) {
    return new UserManager(storage, userComponentFactory);
  }
}
