// Generated by Dagger (https://dagger.dev).
package com.example.android.dagger.di;

import android.content.Context;
import com.example.android.dagger.login.LoginActivity;
import com.example.android.dagger.login.LoginActivity_MembersInjector;
import com.example.android.dagger.login.LoginViewModel;
import com.example.android.dagger.main.MainActivity;
import com.example.android.dagger.main.MainActivity_MembersInjector;
import com.example.android.dagger.main.MainViewModel;
import com.example.android.dagger.registration.RegistrationActivity;
import com.example.android.dagger.registration.RegistrationActivity_MembersInjector;
import com.example.android.dagger.registration.RegistrationViewModel;
import com.example.android.dagger.registration.RegistrationViewModel_Factory;
import com.example.android.dagger.registration.di.RegistrationFragmentModule_EnterDetailsFragment;
import com.example.android.dagger.registration.di.RegistrationFragmentModule_TermsAndConditionsFragment;
import com.example.android.dagger.registration.enterdetails.EnterDetailsFragment;
import com.example.android.dagger.registration.enterdetails.EnterDetailsFragment_MembersInjector;
import com.example.android.dagger.registration.enterdetails.EnterDetailsViewModel;
import com.example.android.dagger.registration.termsandconditions.TermsAndConditionsFragment;
import com.example.android.dagger.registration.termsandconditions.TermsAndConditionsFragment_MembersInjector;
import com.example.android.dagger.settings.SettingsActivity;
import com.example.android.dagger.settings.SettingsActivity_MembersInjector;
import com.example.android.dagger.settings.SettingsViewModel;
import com.example.android.dagger.storage.SharedPreferencesStorage;
import com.example.android.dagger.storage.SharedPreferencesStorage_Factory;
import com.example.android.dagger.user.UserDataRepository;
import com.example.android.dagger.user.UserDataRepository_Factory;
import com.example.android.dagger.user.UserManager;
import com.example.android.dagger.user.UserManager_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DaggerAppComponent appComponent = this;

  private Provider<ActivityModule_RegistrationActivity.RegistrationActivitySubcomponent.Factory> registrationActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_LoginActivity.LoginActivitySubcomponent.Factory> loginActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_MainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<ActivityModule_SettingsActivity.SettingsActivitySubcomponent.Factory> settingsActivitySubcomponentFactoryProvider;

  private Provider<Context> contextProvider;

  private Provider<SharedPreferencesStorage> sharedPreferencesStorageProvider;

  private Provider<UserManager> userManagerProvider;

  private DaggerAppComponent(Context contextParam) {

    initialize(contextParam);

  }

  public static AppComponent.Factory factory() {
    return new Factory();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(RegistrationActivity.class, ((Provider) registrationActivitySubcomponentFactoryProvider)).put(LoginActivity.class, ((Provider) loginActivitySubcomponentFactoryProvider)).put(MainActivity.class, ((Provider) mainActivitySubcomponentFactoryProvider)).put(SettingsActivity.class, ((Provider) settingsActivitySubcomponentFactoryProvider)).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Context contextParam) {
    this.registrationActivitySubcomponentFactoryProvider = new Provider<ActivityModule_RegistrationActivity.RegistrationActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_RegistrationActivity.RegistrationActivitySubcomponent.Factory get() {
        return new RegistrationActivitySubcomponentFactory(appComponent);
      }
    };
    this.loginActivitySubcomponentFactoryProvider = new Provider<ActivityModule_LoginActivity.LoginActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_LoginActivity.LoginActivitySubcomponent.Factory get() {
        return new LoginActivitySubcomponentFactory(appComponent);
      }
    };
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityModule_MainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_MainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory(appComponent);
      }
    };
    this.settingsActivitySubcomponentFactoryProvider = new Provider<ActivityModule_SettingsActivity.SettingsActivitySubcomponent.Factory>() {
      @Override
      public ActivityModule_SettingsActivity.SettingsActivitySubcomponent.Factory get() {
        return new SettingsActivitySubcomponentFactory(appComponent);
      }
    };
    this.contextProvider = InstanceFactory.create(contextParam);
    this.sharedPreferencesStorageProvider = SharedPreferencesStorage_Factory.create(contextProvider);
    this.userManagerProvider = DoubleCheck.provider(UserManager_Factory.create(((Provider) sharedPreferencesStorageProvider)));
  }

  @Override
  public void inject(DaggerApplication arg0) {
    injectDaggerApplication(arg0);
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Factory implements AppComponent.Factory {
    @Override
    public AppComponent create(Context context) {
      Preconditions.checkNotNull(context);
      return new DaggerAppComponent(context);
    }
  }

  private static final class RegistrationActivitySubcomponentFactory implements ActivityModule_RegistrationActivity.RegistrationActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private RegistrationActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityModule_RegistrationActivity.RegistrationActivitySubcomponent create(
        RegistrationActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new RegistrationActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class EnterDetailsFragmentSubcomponentFactory implements RegistrationFragmentModule_EnterDetailsFragment.EnterDetailsFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private final RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl;

    private EnterDetailsFragmentSubcomponentFactory(DaggerAppComponent appComponent,
        RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl) {
      this.appComponent = appComponent;
      this.registrationActivitySubcomponentImpl = registrationActivitySubcomponentImpl;
    }

    @Override
    public RegistrationFragmentModule_EnterDetailsFragment.EnterDetailsFragmentSubcomponent create(
        EnterDetailsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new EnterDetailsFragmentSubcomponentImpl(appComponent, registrationActivitySubcomponentImpl, arg0);
    }
  }

  private static final class TermsAndConditionsFragmentSubcomponentFactory implements RegistrationFragmentModule_TermsAndConditionsFragment.TermsAndConditionsFragmentSubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private final RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl;

    private TermsAndConditionsFragmentSubcomponentFactory(DaggerAppComponent appComponent,
        RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl) {
      this.appComponent = appComponent;
      this.registrationActivitySubcomponentImpl = registrationActivitySubcomponentImpl;
    }

    @Override
    public RegistrationFragmentModule_TermsAndConditionsFragment.TermsAndConditionsFragmentSubcomponent create(
        TermsAndConditionsFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new TermsAndConditionsFragmentSubcomponentImpl(appComponent, registrationActivitySubcomponentImpl, arg0);
    }
  }

  private static final class LoginActivitySubcomponentFactory implements ActivityModule_LoginActivity.LoginActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private LoginActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityModule_LoginActivity.LoginActivitySubcomponent create(LoginActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new LoginActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class MainActivitySubcomponentFactory implements ActivityModule_MainActivity.MainActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private MainActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityModule_MainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class SettingsActivitySubcomponentFactory implements ActivityModule_SettingsActivity.SettingsActivitySubcomponent.Factory {
    private final DaggerAppComponent appComponent;

    private SettingsActivitySubcomponentFactory(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public ActivityModule_SettingsActivity.SettingsActivitySubcomponent create(
        SettingsActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SettingsActivitySubcomponentImpl(appComponent, arg0);
    }
  }

  private static final class EnterDetailsFragmentSubcomponentImpl implements RegistrationFragmentModule_EnterDetailsFragment.EnterDetailsFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl;

    private final EnterDetailsFragmentSubcomponentImpl enterDetailsFragmentSubcomponentImpl = this;

    private EnterDetailsFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl,
        EnterDetailsFragment arg0Param) {
      this.appComponent = appComponent;
      this.registrationActivitySubcomponentImpl = registrationActivitySubcomponentImpl;


    }

    @Override
    public void inject(EnterDetailsFragment arg0) {
      injectEnterDetailsFragment(arg0);
    }

    private EnterDetailsFragment injectEnterDetailsFragment(EnterDetailsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, registrationActivitySubcomponentImpl.dispatchingAndroidInjectorOfObject());
      EnterDetailsFragment_MembersInjector.injectRegistrationViewModel(instance, registrationActivitySubcomponentImpl.registrationViewModelProvider.get());
      EnterDetailsFragment_MembersInjector.injectEnterDetailsViewModel(instance, new EnterDetailsViewModel());
      return instance;
    }
  }

  private static final class TermsAndConditionsFragmentSubcomponentImpl implements RegistrationFragmentModule_TermsAndConditionsFragment.TermsAndConditionsFragmentSubcomponent {
    private final DaggerAppComponent appComponent;

    private final RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl;

    private final TermsAndConditionsFragmentSubcomponentImpl termsAndConditionsFragmentSubcomponentImpl = this;

    private TermsAndConditionsFragmentSubcomponentImpl(DaggerAppComponent appComponent,
        RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl,
        TermsAndConditionsFragment arg0Param) {
      this.appComponent = appComponent;
      this.registrationActivitySubcomponentImpl = registrationActivitySubcomponentImpl;


    }

    @Override
    public void inject(TermsAndConditionsFragment arg0) {
      injectTermsAndConditionsFragment(arg0);
    }

    private TermsAndConditionsFragment injectTermsAndConditionsFragment(
        TermsAndConditionsFragment instance) {
      DaggerFragment_MembersInjector.injectAndroidInjector(instance, registrationActivitySubcomponentImpl.dispatchingAndroidInjectorOfObject());
      TermsAndConditionsFragment_MembersInjector.injectRegistrationViewModel(instance, registrationActivitySubcomponentImpl.registrationViewModelProvider.get());
      return instance;
    }
  }

  private static final class RegistrationActivitySubcomponentImpl implements ActivityModule_RegistrationActivity.RegistrationActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final RegistrationActivitySubcomponentImpl registrationActivitySubcomponentImpl = this;

    private Provider<RegistrationFragmentModule_EnterDetailsFragment.EnterDetailsFragmentSubcomponent.Factory> enterDetailsFragmentSubcomponentFactoryProvider;

    private Provider<RegistrationFragmentModule_TermsAndConditionsFragment.TermsAndConditionsFragmentSubcomponent.Factory> termsAndConditionsFragmentSubcomponentFactoryProvider;

    private Provider<RegistrationViewModel> registrationViewModelProvider;

    private RegistrationActivitySubcomponentImpl(DaggerAppComponent appComponent,
        RegistrationActivity arg0Param) {
      this.appComponent = appComponent;

      initialize(arg0Param);

    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(6).put(RegistrationActivity.class, ((Provider) appComponent.registrationActivitySubcomponentFactoryProvider)).put(LoginActivity.class, ((Provider) appComponent.loginActivitySubcomponentFactoryProvider)).put(MainActivity.class, ((Provider) appComponent.mainActivitySubcomponentFactoryProvider)).put(SettingsActivity.class, ((Provider) appComponent.settingsActivitySubcomponentFactoryProvider)).put(EnterDetailsFragment.class, ((Provider) enterDetailsFragmentSubcomponentFactoryProvider)).put(TermsAndConditionsFragment.class, ((Provider) termsAndConditionsFragmentSubcomponentFactoryProvider)).build();
    }

    private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final RegistrationActivity arg0Param) {
      this.enterDetailsFragmentSubcomponentFactoryProvider = new Provider<RegistrationFragmentModule_EnterDetailsFragment.EnterDetailsFragmentSubcomponent.Factory>() {
        @Override
        public RegistrationFragmentModule_EnterDetailsFragment.EnterDetailsFragmentSubcomponent.Factory get(
            ) {
          return new EnterDetailsFragmentSubcomponentFactory(appComponent, registrationActivitySubcomponentImpl);
        }
      };
      this.termsAndConditionsFragmentSubcomponentFactoryProvider = new Provider<RegistrationFragmentModule_TermsAndConditionsFragment.TermsAndConditionsFragmentSubcomponent.Factory>() {
        @Override
        public RegistrationFragmentModule_TermsAndConditionsFragment.TermsAndConditionsFragmentSubcomponent.Factory get(
            ) {
          return new TermsAndConditionsFragmentSubcomponentFactory(appComponent, registrationActivitySubcomponentImpl);
        }
      };
      this.registrationViewModelProvider = DoubleCheck.provider(RegistrationViewModel_Factory.create(appComponent.userManagerProvider));
    }

    @Override
    public void inject(RegistrationActivity arg0) {
      injectRegistrationActivity(arg0);
    }

    private RegistrationActivity injectRegistrationActivity(RegistrationActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
      RegistrationActivity_MembersInjector.injectRegistrationViewModel(instance, registrationViewModelProvider.get());
      return instance;
    }
  }

  private static final class LoginActivitySubcomponentImpl implements ActivityModule_LoginActivity.LoginActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final LoginActivitySubcomponentImpl loginActivitySubcomponentImpl = this;

    private LoginActivitySubcomponentImpl(DaggerAppComponent appComponent,
        LoginActivity arg0Param) {
      this.appComponent = appComponent;


    }

    private LoginViewModel loginViewModel() {
      return new LoginViewModel(appComponent.userManagerProvider.get());
    }

    @Override
    public void inject(LoginActivity arg0) {
      injectLoginActivity(arg0);
    }

    private LoginActivity injectLoginActivity(LoginActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      LoginActivity_MembersInjector.injectLoginViewModel(instance, loginViewModel());
      return instance;
    }
  }

  private static final class MainActivitySubcomponentImpl implements ActivityModule_MainActivity.MainActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final MainActivitySubcomponentImpl mainActivitySubcomponentImpl = this;

    private Provider<UserDataRepository> userDataRepositoryProvider;

    private MainActivitySubcomponentImpl(DaggerAppComponent appComponent, MainActivity arg0Param) {
      this.appComponent = appComponent;

      initialize(arg0Param);

    }

    private MainViewModel mainViewModel() {
      return new MainViewModel(userDataRepositoryProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0Param) {
      this.userDataRepositoryProvider = DoubleCheck.provider(UserDataRepository_Factory.create(appComponent.userManagerProvider));
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectMainViewModel(instance, mainViewModel());
      MainActivity_MembersInjector.injectUserManager(instance, appComponent.userManagerProvider.get());
      return instance;
    }
  }

  private static final class SettingsActivitySubcomponentImpl implements ActivityModule_SettingsActivity.SettingsActivitySubcomponent {
    private final DaggerAppComponent appComponent;

    private final SettingsActivitySubcomponentImpl settingsActivitySubcomponentImpl = this;

    private Provider<UserDataRepository> userDataRepositoryProvider;

    private SettingsActivitySubcomponentImpl(DaggerAppComponent appComponent,
        SettingsActivity arg0Param) {
      this.appComponent = appComponent;

      initialize(arg0Param);

    }

    private SettingsViewModel settingsViewModel() {
      return new SettingsViewModel(userDataRepositoryProvider.get(), appComponent.userManagerProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SettingsActivity arg0Param) {
      this.userDataRepositoryProvider = DoubleCheck.provider(UserDataRepository_Factory.create(appComponent.userManagerProvider));
    }

    @Override
    public void inject(SettingsActivity arg0) {
      injectSettingsActivity(arg0);
    }

    private SettingsActivity injectSettingsActivity(SettingsActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, appComponent.dispatchingAndroidInjectorOfObject());
      SettingsActivity_MembersInjector.injectSettingsViewModel(instance, settingsViewModel());
      SettingsActivity_MembersInjector.injectUserManager(instance, appComponent.userManagerProvider.get());
      return instance;
    }
  }
}
